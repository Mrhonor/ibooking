{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import { mapActions } from \"vuex\";\nimport { login } from '@/api/request.js';\nexport default {\n  name: \"MyLogin\",\n\n  data() {\n    // 用户名的校验方法\n    let validateName = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"请输入用户名\"));\n      } // 用户名以字母开头,长度在5-16之间,允许字母数字下划线\n\n\n      const userNameRule = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\n\n      if (userNameRule.test(value)) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(new Error(\"字母开头,长度5-16之间,允许字母数字下划线\"));\n      }\n    }; // 密码的校验方法\n\n\n    let validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        return callback(new Error(\"请输入密码\"));\n      } // 密码以字母开头,长度在6-18之间,允许字母数字和下划线\n\n\n      const passwordRule = /^[a-zA-Z]\\w{5,17}$/;\n\n      if (passwordRule.test(value)) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(new Error(\"字母开头,长度6-18之间,允许字母数字和下划线\"));\n      }\n    };\n\n    return {\n      LoginUser: {\n        name: \"\",\n        pass: \"\"\n      },\n      // 用户信息校验规则,validator(校验方法),trigger(触发方式),blur为在组件 Input 失去焦点时触发\n      rules: {\n        name: [{\n          validator: validateName,\n          trigger: \"blur\"\n        }],\n        pass: [{\n          validator: validatePass,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n\n  computed: {\n    // 获取vuex中的showLogin，控制登录组件是否显示\n    isLogin: {\n      get() {\n        return true;\n      }\n\n    }\n  },\n  methods: {\n    beforeClose() {\n      return false;\n    },\n\n    Login() {\n      // 通过element自定义表单校验规则，校验用户输入的用户信息\n      // this.$refs[\"ruleForm\"].validate(valid => {\n      //   //如果通过校验开始登录\n      //   if (valid) {\n      //     if (this.LoginUser.name === 'admin' && this.LoginUser.pass === 'admin123') {\n      //       // 隐藏登录组件\n      //       this.isLogin = false;\n      //       // 登录信息存到本地\n      //       let user = JSON.stringify({userName: \"admin\", user_id: 8614});\n      //       localStorage.setItem(\"user\", user);\n      //       // 登录信息存到vuex\n      //       // this.setUser({userName: \"admin\", user_id: 8614});\n      //       // 弹出通知框提示登录成功信息\n      //       this.notifySucceed('登陆成功');\n      //     } else {\n      //       // 清空输入框的校验状态\n      //       this.$refs[\"ruleForm\"].resetFields();\n      //       // 弹出通知框提示登录失败信息\n      //       this.notifyError('用户名或密码错误');\n      //     }\n      //   } else {\n      //     return false;\n      //   }\n      // });\n      const params = {\n        username_login: this.LoginUser.name,\n        password_login: this.LoginUser.pass\n      };\n      login(params).then(res => {\n        if (res && res.ok === 1) {\n          localStorage.setItem(\"username\", this.LoginUser.name);\n          this.$router.push('/task');\n          this.notifySucceed('登陆成功');\n        } else {\n          this.notifyError('用户名或密码错误');\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AAEA;EACAA,eADA;;EAEAC;IACA;IACA;MACA;QACA;MACA,CAHA,CAIA;;;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;MACA;IACA,CAZA,CAFA,CAeA;;;IACA;MACA;QACA;MACA,CAHA,CAIA;;;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA,gBACA,qCADA;MAGA;IACA,CAdA;;IAeA;MACAC;QACAF,QADA;QAEAG;MAFA,CADA;MAKA;MACAC;QACAJ;UAAAK;UAAAC;QAAA,EADA;QAEAH;UAAAE;UAAAC;QAAA;MAFA;IANA;EAWA,CA5CA;;EA6CAC;IACA;IACAC;MACAC;QACA;MACA;;IAHA;EAFA,CA7CA;EAqDAC;IACAC;MACA;IACA,CAHA;;IAIAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACAC,mCADA;QAEAC;MAFA;MAIAC;QACA;UACAC;UACA;UACA;QACA,CAJA,MAIA;UACA;QACA;MACA,CARA;IASA;;EA1CA;AArDA","names":["name","data","LoginUser","pass","rules","validator","trigger","computed","isLogin","get","methods","beforeClose","Login","username_login","password_login","login","localStorage"],"sourceRoot":"src/components","sources":["MyLogin.vue"],"sourcesContent":["\n<template>\n  <div id=\"myLogin\">\n    <el-dialog title=\"登录\" width=\"300px\" center :visible.sync=\"isLogin\" :before-close=\"beforeClose\">\n      <el-form :model=\"LoginUser\" :rules=\"rules\" status-icon ref=\"ruleForm\" class=\"demo-ruleForm\">\n        <el-form-item prop=\"name\">\n          <el-input prefix-icon=\"el-icon-user-solid\" placeholder=\"请输入账号\" v-model=\"LoginUser.name\"></el-input>\n        </el-form-item>\n        <el-form-item prop=\"pass\">\n          <el-input\n            prefix-icon=\"el-icon-view\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n            v-model=\"LoginUser.pass\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button size=\"medium\" type=\"primary\" @click=\"Login\" style=\"width:100%;\">登录</el-button>\n          <span>忘记密码？</span>\n          <router-link to=\"/register\">\n            <span style=\"float:right;color:blue;cursor: pointer;\">注册</span>\n          </router-link>\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n</template>\n<script>\n// import { mapActions } from \"vuex\";\nimport { login } from '@/api/request.js'\n\nexport default {\n  name: \"MyLogin\",\n  data() {\n    // 用户名的校验方法\n    let validateName = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"请输入用户名\"));\n      }\n      // 用户名以字母开头,长度在5-16之间,允许字母数字下划线\n      const userNameRule = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\n      if (userNameRule.test(value)) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(new Error(\"字母开头,长度5-16之间,允许字母数字下划线\"));\n      }\n    };\n    // 密码的校验方法\n    let validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        return callback(new Error(\"请输入密码\"));\n      }\n      // 密码以字母开头,长度在6-18之间,允许字母数字和下划线\n      const passwordRule = /^[a-zA-Z]\\w{5,17}$/;\n      if (passwordRule.test(value)) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(\n          new Error(\"字母开头,长度6-18之间,允许字母数字和下划线\")\n        );\n      }\n    };\n    return {\n      LoginUser: {\n        name: \"\",\n        pass: \"\"\n      },\n      // 用户信息校验规则,validator(校验方法),trigger(触发方式),blur为在组件 Input 失去焦点时触发\n      rules: {\n        name: [{ validator: validateName, trigger: \"blur\" }],\n        pass: [{ validator: validatePass, trigger: \"blur\" }]\n      }\n    };\n  },\n  computed: {\n    // 获取vuex中的showLogin，控制登录组件是否显示\n    isLogin: {\n      get() {\n        return true;\n      },\n    }\n  },\n  methods: {\n    beforeClose() {\n      return false\n    },\n    Login() {\n      // 通过element自定义表单校验规则，校验用户输入的用户信息\n      // this.$refs[\"ruleForm\"].validate(valid => {\n      //   //如果通过校验开始登录\n      //   if (valid) {\n      //     if (this.LoginUser.name === 'admin' && this.LoginUser.pass === 'admin123') {\n      //       // 隐藏登录组件\n      //       this.isLogin = false;\n      //       // 登录信息存到本地\n      //       let user = JSON.stringify({userName: \"admin\", user_id: 8614});\n      //       localStorage.setItem(\"user\", user);\n      //       // 登录信息存到vuex\n      //       // this.setUser({userName: \"admin\", user_id: 8614});\n      //       // 弹出通知框提示登录成功信息\n      //       this.notifySucceed('登陆成功');\n      //     } else {\n      //       // 清空输入框的校验状态\n      //       this.$refs[\"ruleForm\"].resetFields();\n      //       // 弹出通知框提示登录失败信息\n      //       this.notifyError('用户名或密码错误');\n      //     }\n      //   } else {\n      //     return false;\n      //   }\n      // });\n      const params = {\n        username_login: this.LoginUser.name,\n        password_login: this.LoginUser.pass,\n      }\n      login(params).then((res) => {\n        if(res && res.ok === 1) {\n          localStorage.setItem(\"username\", this.LoginUser.name);\n          this.$router.push('/task')\n          this.notifySucceed('登陆成功');\n        } else {\n          this.notifyError('用户名或密码错误');\n        }\n      })\n    }\n  }\n};\n</script>\n<style scoped>\n#myLogin {\n  background: rgb(0, 195, 255);\n}\n</style>"]},"metadata":{},"sourceType":"module"}