{"ast":null,"code":"import axios from 'axios'; // import { Message, Loading } from 'element-ui'\n\nconst ConfigBaseURL = 'http://127.0.0.1:8090/'; //默认路径，这里也可以使用env来判断环境\n// let loadingInstance = null //这里是loading\n//使用create方法创建axios实例\n\nexport const Service = axios.create({\n  timeout: 7000,\n  // 请求超时时间\n  baseURL: ConfigBaseURL,\n  method: 'post',\n  headers: {\n    'Content-Type': 'application/json;charset:utf-8;'\n  }\n}); // 添加请求拦截器\n\nService.interceptors.request.use(config => {\n  loadingInstance = Loading.service({\n    lock: true,\n    text: 'loading...'\n  });\n  return config;\n}); // 添加响应拦截器\n\nService.interceptors.response.use(response => {\n  loadingInstance.close(); // console.log(response)\n\n  return response.data;\n}, error => {\n  console.log('TCL: error', error);\n  const msg = error.Message !== undefined ? error.Message : '';\n  Message({\n    message: '网络错误' + msg,\n    type: 'error',\n    duration: 3 * 1000\n  });\n  loadingInstance.close();\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","ConfigBaseURL","Service","create","timeout","baseURL","method","headers","interceptors","request","use","config","loadingInstance","Loading","service","lock","text","response","close","data","error","console","log","msg","Message","undefined","message","type","duration","Promise","reject"],"sources":["D:/y1/8 软件过程管理/vuelibrary/vue-library/vue-library/src/api/Service.js"],"sourcesContent":["import axios from 'axios'\r\n// import { Message, Loading } from 'element-ui'\r\nconst ConfigBaseURL = 'http://127.0.0.1:8090/' //默认路径，这里也可以使用env来判断环境\r\n// let loadingInstance = null //这里是loading\r\n//使用create方法创建axios实例\r\nexport const Service = axios.create({\r\n  timeout: 7000, // 请求超时时间\r\n  baseURL: ConfigBaseURL,\r\n  method: 'post',\r\n  headers: {\r\n    'Content-Type': 'application/json;charset:utf-8;'\r\n  }\r\n})\r\n// 添加请求拦截器\r\nService.interceptors.request.use(config => {\r\n  loadingInstance = Loading.service({\r\n    lock: true,\r\n    text: 'loading...'\r\n  })\r\n  return config\r\n})\r\n// 添加响应拦截器\r\nService.interceptors.response.use(response => {\r\n  loadingInstance.close()\r\n  // console.log(response)\r\n  return response.data\r\n}, error => {\r\n  console.log('TCL: error', error)\r\n  const msg = error.Message !== undefined ? error.Message : ''\r\n  Message({\r\n    message: '网络错误' + msg,\r\n    type: 'error',\r\n    duration: 3 * 1000\r\n  })\r\n  loadingInstance.close()\r\n  return Promise.reject(error)\r\n})"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,MAAMC,aAAa,GAAG,wBAAtB,C,CAA+C;AAC/C;AACA;;AACA,OAAO,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EAClCC,OAAO,EAAE,IADyB;EACnB;EACfC,OAAO,EAAEJ,aAFyB;EAGlCK,MAAM,EAAE,MAH0B;EAIlCC,OAAO,EAAE;IACP,gBAAgB;EADT;AAJyB,CAAb,CAAhB,C,CAQP;;AACAL,OAAO,CAACM,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiCC,MAAM,IAAI;EACzCC,eAAe,GAAGC,OAAO,CAACC,OAAR,CAAgB;IAChCC,IAAI,EAAE,IAD0B;IAEhCC,IAAI,EAAE;EAF0B,CAAhB,CAAlB;EAIA,OAAOL,MAAP;AACD,CAND,E,CAOA;;AACAT,OAAO,CAACM,YAAR,CAAqBS,QAArB,CAA8BP,GAA9B,CAAkCO,QAAQ,IAAI;EAC5CL,eAAe,CAACM,KAAhB,GAD4C,CAE5C;;EACA,OAAOD,QAAQ,CAACE,IAAhB;AACD,CAJD,EAIGC,KAAK,IAAI;EACVC,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;EACA,MAAMG,GAAG,GAAGH,KAAK,CAACI,OAAN,KAAkBC,SAAlB,GAA8BL,KAAK,CAACI,OAApC,GAA8C,EAA1D;EACAA,OAAO,CAAC;IACNE,OAAO,EAAE,SAASH,GADZ;IAENI,IAAI,EAAE,OAFA;IAGNC,QAAQ,EAAE,IAAI;EAHR,CAAD,CAAP;EAKAhB,eAAe,CAACM,KAAhB;EACA,OAAOW,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACD,CAdD"},"metadata":{},"sourceType":"module"}