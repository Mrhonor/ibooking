{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { register } from '@/api/request.js';\nexport default {\n  name: \"MyRegister\",\n\n  data() {\n    // 用户名的校验方法\n    // let validateName = (rule, value, callback) => {\n    //   if (!value) {\n    //     return callback(new Error(\"请输入用户名\"));\n    //   }\n    //   // 用户名以字母开头,长度在5-16之间,允许字母数字下划线\n    //   const userNameRule = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\n    //   if (userNameRule.test(value)) {\n    //     //判断数据库中是否已经存在该用户名\n    //     this.$axios\n    //       .post(\"/api/users/findUserName\", {\n    //         userName: this.RegisterUser.name\n    //       })\n    //       .then(res => {\n    //         // “001”代表用户名不存在，可以注册\n    //         if (res.data.code == \"001\") {\n    //           this.$refs.ruleForm.validateField(\"checkPass\");\n    //           return callback();\n    //         } else {\n    //           return callback(new Error(res.data.msg));\n    //         }\n    //       })\n    //       .catch(err => {\n    //         return Promise.reject(err);\n    //       });\n    //   } else {\n    //     return callback(new Error(\"字母开头,长度5-16之间,允许字母数字下划线\"));\n    //   }\n    // };\n    // 密码的校验方法\n    // let validatePass = (rule, value, callback) => {\n    //   if (value === \"\") {\n    //     return callback(new Error(\"请输入密码\"));\n    //   }\n    //   // 密码以字母开头,长度在6-18之间,允许字母数字和下划线\n    //   const passwordRule = /^[a-zA-Z]\\w{5,17}$/;\n    //   if (passwordRule.test(value)) {\n    //     this.$refs.ruleForm.validateField(\"checkPass\");\n    //     return callback();\n    //   } else {\n    //     return callback(\n    //       new Error(\"字母开头,长度6-18之间,允许字母数字和下划线\")\n    //     );\n    //   }\n    // };\n    // 确认密码的校验方法\n    // let validateConfirmPass = (rule, value, callback) => {\n    //   if (value === \"\") {\n    //     return callback(new Error(\"请输入确认密码\"));\n    //   }\n    //   // 校验是否以密码一致\n    //   if (this.RegisterUser.pass != \"\" && value === this.RegisterUser.pass) {\n    //     this.$refs.ruleForm.validateField(\"checkPass\");\n    //     return callback();\n    //   } else {\n    //     return callback(new Error(\"两次输入的密码不一致\"));\n    //   }\n    // };\n    return {\n      isRegister: true,\n      // 控制注册组件是否显示\n      RegisterUser: {\n        name: \"\",\n        pass: \"\",\n        confirmPass: \"\"\n      } // 用户信息校验规则,validator(校验方法),trigger(触发方式),blur为在组件 Input 失去焦点时触发\n      // rules: {\n      //   name: [{ validator: validateName, trigger: \"blur\" }],\n      //   pass: [{ validator: validatePass, trigger: \"blur\" }],\n      //   confirmPass: [{ validator: validateConfirmPass, trigger: \"blur\" }]\n      // }\n\n    };\n  },\n\n  watch: {},\n  methods: {\n    beforeClose() {\n      return false;\n    },\n\n    Register() {\n      // const form = new FormData()\n      // form.append('username', this.RegisterUser.name)\n      // form.append('password', this.RegisterUser.pass)\n      const params = {\n        username: this.RegisterUser.name,\n        password: this.RegisterUser.pass\n      };\n      register(params).then(res => {\n        if (res && res.success === true) {\n          console.log(res); // localStorage.setItem(\"username\", res.data[0]);\n          // localStorage.setItem(\"password\", res.data[1]);\n          // localStorage.setItem(\"role\", res.data[2]);\n          // this.$router.push('/task')\n\n          this.$message.success('登录成功');\n        } else {\n          this.$message.error('用户名或密码错误');\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AAEA;EACAA,kBADA;;EAEAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACAC,gBADA;MACA;MACAC;QACAH,QADA;QAEAI,QAFA;QAGAC;MAHA,CAFA,CAOA;MACA;MACA;MACA;MACA;MACA;;IAZA;EAcA,CA3EA;;EA4EAC,SA5EA;EA+EAC;IACAC;MACA;IACA,CAHA;;IAIAC;MACA;MACA;MACA;MAEA;QACAC,gCADA;QAEAC;MAFA;MAIAC;QACA;UACAC,iBADA,CAEA;UACA;UACA;UACA;;UACA;QACA,CAPA,MAOA;UACA;QACA;MACA,CAXA;IAYA;;EAzBA;AA/EA","names":["name","data","isRegister","RegisterUser","pass","confirmPass","watch","methods","beforeClose","Register","username","password","register","console"],"sourceRoot":"src/components","sources":["MyRegister.vue"],"sourcesContent":["\n<template>\n  <div id=\"register\">\n    <p class=\"register-title\">图书管理系统</p>\n    <el-dialog title=\"注册\" width=\"300px\" center :visible.sync=\"isRegister\" :before-close=\"beforeClose\">\n      <el-form\n        :model=\"RegisterUser\"\n        status-icon\n        ref=\"ruleForm\"\n        class=\"demo-ruleForm\"\n      >\n        <el-form-item >\n          <el-input\n            prefix-icon=\"el-icon-user-solid\"\n            placeholder=\"请输入账号\"\n            v-model=\"RegisterUser.name\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item >\n          <el-input\n            prefix-icon=\"el-icon-view\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n            v-model=\"RegisterUser.pass\"\n          ></el-input>\n        </el-form-item>\n        <!-- <el-form-item >\n          <el-input\n            prefix-icon=\"el-icon-view\"\n            type=\"password\"\n            placeholder=\"请再次输入密码\"\n            v-model=\"RegisterUser.confirmPass\"\n          ></el-input>\n        </el-form-item> -->\n        <el-form-item>\n          <el-button size=\"medium\" type=\"primary\" @click=\"Register\" style=\"width:100%;\">注册</el-button>\n          <router-link to=\"/login\">\n            <span style=\"color:blue;cursor: pointer;\">登录</span>\n          </router-link>\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n</template>\n<script>\nimport { register } from '@/api/request.js'\n\nexport default {\n  name: \"MyRegister\",\n  data() {\n    // 用户名的校验方法\n    // let validateName = (rule, value, callback) => {\n    //   if (!value) {\n    //     return callback(new Error(\"请输入用户名\"));\n    //   }\n    //   // 用户名以字母开头,长度在5-16之间,允许字母数字下划线\n    //   const userNameRule = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\n    //   if (userNameRule.test(value)) {\n    //     //判断数据库中是否已经存在该用户名\n    //     this.$axios\n    //       .post(\"/api/users/findUserName\", {\n    //         userName: this.RegisterUser.name\n    //       })\n    //       .then(res => {\n    //         // “001”代表用户名不存在，可以注册\n    //         if (res.data.code == \"001\") {\n    //           this.$refs.ruleForm.validateField(\"checkPass\");\n    //           return callback();\n    //         } else {\n    //           return callback(new Error(res.data.msg));\n    //         }\n    //       })\n    //       .catch(err => {\n    //         return Promise.reject(err);\n    //       });\n    //   } else {\n    //     return callback(new Error(\"字母开头,长度5-16之间,允许字母数字下划线\"));\n    //   }\n    // };\n    // 密码的校验方法\n    // let validatePass = (rule, value, callback) => {\n    //   if (value === \"\") {\n    //     return callback(new Error(\"请输入密码\"));\n    //   }\n    //   // 密码以字母开头,长度在6-18之间,允许字母数字和下划线\n    //   const passwordRule = /^[a-zA-Z]\\w{5,17}$/;\n    //   if (passwordRule.test(value)) {\n    //     this.$refs.ruleForm.validateField(\"checkPass\");\n    //     return callback();\n    //   } else {\n    //     return callback(\n    //       new Error(\"字母开头,长度6-18之间,允许字母数字和下划线\")\n    //     );\n    //   }\n    // };\n    // 确认密码的校验方法\n    // let validateConfirmPass = (rule, value, callback) => {\n    //   if (value === \"\") {\n    //     return callback(new Error(\"请输入确认密码\"));\n    //   }\n    //   // 校验是否以密码一致\n    //   if (this.RegisterUser.pass != \"\" && value === this.RegisterUser.pass) {\n    //     this.$refs.ruleForm.validateField(\"checkPass\");\n    //     return callback();\n    //   } else {\n    //     return callback(new Error(\"两次输入的密码不一致\"));\n    //   }\n    // };\n    return {\n      isRegister: true, // 控制注册组件是否显示\n      RegisterUser: {\n        name: \"\",\n        pass: \"\",\n        confirmPass: \"\"\n      },\n      // 用户信息校验规则,validator(校验方法),trigger(触发方式),blur为在组件 Input 失去焦点时触发\n      // rules: {\n      //   name: [{ validator: validateName, trigger: \"blur\" }],\n      //   pass: [{ validator: validatePass, trigger: \"blur\" }],\n      //   confirmPass: [{ validator: validateConfirmPass, trigger: \"blur\" }]\n      // }\n    };\n  },\n  watch: {\n  \n  },\n  methods: {\n    beforeClose() {\n      return false\n    },\n    Register() {\n      // const form = new FormData()\n      // form.append('username', this.RegisterUser.name)\n      // form.append('password', this.RegisterUser.pass)\n\n      const params = {\n        username: this.RegisterUser.name,\n        password: this.RegisterUser.pass,\n      }\n      register(params).then((res) => {\n        if(res && res.success === true) {\n          console.log(res);\n          // localStorage.setItem(\"username\", res.data[0]);\n          // localStorage.setItem(\"password\", res.data[1]);\n          // localStorage.setItem(\"role\", res.data[2]);\n          // this.$router.push('/task')\n          this.$message.success('登录成功');\n        } else {\n          this.$message.error('用户名或密码错误');\n        }\n      })\n    }\n  }\n};\n</script>\n<style scoped>\n.register-title {\n  text-align: center;\n  margin-top: 80px;\n  color: #000;\n  font-size: 30px;\n  font-weight: bold;\n}\n</style>"]},"metadata":{},"sourceType":"module"}