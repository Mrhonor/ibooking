{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"MyRegister\",\n\n  data() {\n    // 用户名的校验方法\n    let validateName = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"请输入用户名\"));\n      } // 用户名以字母开头,长度在5-16之间,允许字母数字下划线\n\n\n      const userNameRule = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\n\n      if (userNameRule.test(value)) {\n        //判断数据库中是否已经存在该用户名\n        this.$axios.post(\"/api/users/findUserName\", {\n          userName: this.RegisterUser.name\n        }).then(res => {\n          // “001”代表用户名不存在，可以注册\n          if (res.data.code == \"001\") {\n            this.$refs.ruleForm.validateField(\"checkPass\");\n            return callback();\n          } else {\n            return callback(new Error(res.data.msg));\n          }\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      } else {\n        return callback(new Error(\"字母开头,长度5-16之间,允许字母数字下划线\"));\n      }\n    }; // 密码的校验方法\n\n\n    let validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        return callback(new Error(\"请输入密码\"));\n      } // 密码以字母开头,长度在6-18之间,允许字母数字和下划线\n\n\n      const passwordRule = /^[a-zA-Z]\\w{5,17}$/;\n\n      if (passwordRule.test(value)) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(new Error(\"字母开头,长度6-18之间,允许字母数字和下划线\"));\n      }\n    }; // 确认密码的校验方法\n\n\n    let validateConfirmPass = (rule, value, callback) => {\n      if (value === \"\") {\n        return callback(new Error(\"请输入确认密码\"));\n      } // 校验是否以密码一致\n\n\n      if (this.RegisterUser.pass != \"\" && value === this.RegisterUser.pass) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(new Error(\"两次输入的密码不一致\"));\n      }\n    };\n\n    return {\n      isRegister: true,\n      // 控制注册组件是否显示\n      RegisterUser: {\n        name: \"\",\n        pass: \"\",\n        confirmPass: \"\"\n      },\n      // 用户信息校验规则,validator(校验方法),trigger(触发方式),blur为在组件 Input 失去焦点时触发\n      rules: {\n        name: [{\n          validator: validateName,\n          trigger: \"blur\"\n        }],\n        pass: [{\n          validator: validatePass,\n          trigger: \"blur\"\n        }],\n        confirmPass: [{\n          validator: validateConfirmPass,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n\n  watch: {},\n  methods: {\n    beforeClose() {\n      return false;\n    },\n\n    Register() {// 通过element自定义表单校验规则，校验用户输入的用户信息\n      //   this.$refs[\"ruleForm\"].validate(valid => {\n      //     //如果通过校验开始注册\n      //     if (valid) {\n      //       this.$axios\n      //         .post(\"/api/users/register\", {\n      //           userName: this.RegisterUser.name,\n      //           password: this.RegisterUser.pass\n      //         })\n      //         .then(res => {\n      //           // “001”代表注册成功，其他的均为失败\n      //           if (res.data.code === \"001\") {\n      //             // 隐藏注册组件\n      //             this.isRegister = false;\n      //             // 弹出通知框提示注册成功信息\n      //             this.notifySucceed(res.data.msg);\n      //           } else {\n      //             // 弹出通知框提示注册失败信息\n      //             this.notifyError(res.data.msg);\n      //           }\n      //         })\n      //         .catch(err => {\n      //           return Promise.reject(err);\n      //         });\n      //     } else {\n      //       return false;\n      //     }\n      //   });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;EACAA,kBADA;;EAEAC;IACA;IACA;MACA;QACA;MACA,CAHA,CAIA;;;MACA;;MACA;QACA;QACA,YACAC,IADA,CACA,yBADA,EACA;UACAC;QADA,CADA,EAIAC,IAJA,CAIAC;UACA;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;UACA;QACA,CAZA,EAaAC,KAbA,CAaAC;UACA;QACA,CAfA;MAgBA,CAlBA,MAkBA;QACA;MACA;IACA,CA3BA,CAFA,CA8BA;;;IACA;MACA;QACA;MACA,CAHA,CAIA;;;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA,gBACA,qCADA;MAGA;IACA,CAdA,CA/BA,CA8CA;;;IACA;MACA;QACA;MACA,CAHA,CAIA;;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;MACA;IACA,CAXA;;IAYA;MACAC,gBADA;MACA;MACAC;QACAT,QADA;QAEAU,QAFA;QAGAC;MAHA,CAFA;MAOA;MACAC;QACAZ;UAAAa;UAAAC;QAAA,EADA;QAEAJ;UAAAG;UAAAC;QAAA,EAFA;QAGAH;UAAAE;UAAAC;QAAA;MAHA;IARA;EAcA,CA3EA;;EA4EAC,SA5EA;EA+EAC;IACAC;MACA;IACA,CAHA;;IAIAC,YACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;;EAjCA;AA/EA","names":["name","data","post","userName","then","res","catch","err","isRegister","RegisterUser","pass","confirmPass","rules","validator","trigger","watch","methods","beforeClose","Register"],"sourceRoot":"src/components","sources":["MyRegister.vue"],"sourcesContent":["\n<template>\n  <div id=\"register\">\n    <el-dialog title=\"注册\" width=\"300px\" center :visible.sync=\"isRegister\" :before-close=\"beforeClose\">\n      <el-form\n        :model=\"RegisterUser\"\n        :rules=\"rules\"\n        status-icon\n        ref=\"ruleForm\"\n        class=\"demo-ruleForm\"\n      >\n        <el-form-item prop=\"name\">\n          <el-input\n            prefix-icon=\"el-icon-user-solid\"\n            placeholder=\"请输入账号\"\n            v-model=\"RegisterUser.name\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item prop=\"pass\">\n          <el-input\n            prefix-icon=\"el-icon-view\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n            v-model=\"RegisterUser.pass\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item prop=\"confirmPass\">\n          <el-input\n            prefix-icon=\"el-icon-view\"\n            type=\"password\"\n            placeholder=\"请再次输入密码\"\n            v-model=\"RegisterUser.confirmPass\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button size=\"medium\" type=\"primary\" @click=\"Register\" style=\"width:100%;\">注册</el-button>\n          <router-link to=\"/login\">\n            <span style=\"color:blue;cursor: pointer;\">登录</span>\n          </router-link>\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n</template>\n<script>\n\nexport default {\n  name: \"MyRegister\",\n  data() {\n    // 用户名的校验方法\n    let validateName = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"请输入用户名\"));\n      }\n      // 用户名以字母开头,长度在5-16之间,允许字母数字下划线\n      const userNameRule = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\n      if (userNameRule.test(value)) {\n        //判断数据库中是否已经存在该用户名\n        this.$axios\n          .post(\"/api/users/findUserName\", {\n            userName: this.RegisterUser.name\n          })\n          .then(res => {\n            // “001”代表用户名不存在，可以注册\n            if (res.data.code == \"001\") {\n              this.$refs.ruleForm.validateField(\"checkPass\");\n              return callback();\n            } else {\n              return callback(new Error(res.data.msg));\n            }\n          })\n          .catch(err => {\n            return Promise.reject(err);\n          });\n      } else {\n        return callback(new Error(\"字母开头,长度5-16之间,允许字母数字下划线\"));\n      }\n    };\n    // 密码的校验方法\n    let validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        return callback(new Error(\"请输入密码\"));\n      }\n      // 密码以字母开头,长度在6-18之间,允许字母数字和下划线\n      const passwordRule = /^[a-zA-Z]\\w{5,17}$/;\n      if (passwordRule.test(value)) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(\n          new Error(\"字母开头,长度6-18之间,允许字母数字和下划线\")\n        );\n      }\n    };\n    // 确认密码的校验方法\n    let validateConfirmPass = (rule, value, callback) => {\n      if (value === \"\") {\n        return callback(new Error(\"请输入确认密码\"));\n      }\n      // 校验是否以密码一致\n      if (this.RegisterUser.pass != \"\" && value === this.RegisterUser.pass) {\n        this.$refs.ruleForm.validateField(\"checkPass\");\n        return callback();\n      } else {\n        return callback(new Error(\"两次输入的密码不一致\"));\n      }\n    };\n    return {\n      isRegister: true, // 控制注册组件是否显示\n      RegisterUser: {\n        name: \"\",\n        pass: \"\",\n        confirmPass: \"\"\n      },\n      // 用户信息校验规则,validator(校验方法),trigger(触发方式),blur为在组件 Input 失去焦点时触发\n      rules: {\n        name: [{ validator: validateName, trigger: \"blur\" }],\n        pass: [{ validator: validatePass, trigger: \"blur\" }],\n        confirmPass: [{ validator: validateConfirmPass, trigger: \"blur\" }]\n      }\n    };\n  },\n  watch: {\n  \n  },\n  methods: {\n    beforeClose() {\n      return false\n    },\n    Register() {\n      // 通过element自定义表单校验规则，校验用户输入的用户信息\n    //   this.$refs[\"ruleForm\"].validate(valid => {\n    //     //如果通过校验开始注册\n    //     if (valid) {\n    //       this.$axios\n    //         .post(\"/api/users/register\", {\n    //           userName: this.RegisterUser.name,\n    //           password: this.RegisterUser.pass\n    //         })\n    //         .then(res => {\n    //           // “001”代表注册成功，其他的均为失败\n    //           if (res.data.code === \"001\") {\n    //             // 隐藏注册组件\n    //             this.isRegister = false;\n    //             // 弹出通知框提示注册成功信息\n    //             this.notifySucceed(res.data.msg);\n    //           } else {\n    //             // 弹出通知框提示注册失败信息\n    //             this.notifyError(res.data.msg);\n    //           }\n    //         })\n    //         .catch(err => {\n    //           return Promise.reject(err);\n    //         });\n    //     } else {\n    //       return false;\n    //     }\n    //   });\n    }\n  }\n};\n</script>\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}